/*
 * SPDX-License-Identifier: MIT
 *
 * The MIT License (MIT)
 *
 * Copyright (c) 2023-2024 Mastodon4J
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
if (!project.hasProperty('sonatypeUsername')) ext.sonatypeUsername = '**undefined**'
if (!project.hasProperty('sonatypePassword')) ext.sonatypePassword = '**undefined**'
if (!project.hasProperty('sonarToken')) ext.sonarToken = '**undefined**'
boolean localRelease = (project.rootProject.findProperty('localRelease') ?: false).toBoolean()

defaultTasks 'build'

config {
  release = !project.version.endsWith('-SNAPSHOT')
  info {
    vendor = 'Mastodon4J'
    name = 'Mastodon4J client library'
    description = 'Mastodon4J is an open-source Java library for the Mastodon API.'
    inceptionYear = '2023'
    links {
      website = 'https://github.com/Mastodon4J/Mastodon4J'
      issueTracker = 'https://github.com/Mastodon4J/Mastodon4J/issues'
      scm = 'https://github.com/Mastodon4J/Mastodon4J.git'
    }
    scm {
      connection = 'scm:git://github.com/Mastodon4J/Mastodon4J.git'
      developerConnection = 'scm:git://github.com/Mastodon4J/Mastodon4J.git'
      url = 'https://github.com/Mastodon4J/Mastodon4J'
    }
    people {
      person {
        id = 'reinhapa'
        name = 'Patrick Reinhart'
        email = 'patrick@reini.net'
        roles = [ 'developer' ]
      }
    }
    repositories {
      repository {
        name = 'sonatypeRelease'
        url  = 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
        credentials {
          username = sonatypeUsername
          password = sonatypePassword
        }
      }
      repository {
        name = 'sonatypeSnapshot'
        url  = 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
        credentials {
          username = sonatypeUsername
          password = sonatypePassword
        }
      }
      repository {
        name = 'localRelease'
        url  = "${project.layout.buildDirectory}/repos/local/release"
      }
      repository {
        name = 'localSnapshot'
        url  = "${project.layout.buildDirectory}/repos/local/snapshot"
      }
    }
    implementation {
      enabled = false
    }
  }
  quality {
    errorprone {
      errorProneVersion = '2.18.0'
    }
    sonar {
      hostUrl = 'https://sonarcloud.io'
      login = sonarToken
      organization = 'Mastodon4J'
      projectKey = 'Mastodon4J_Mastodon4J'
    }
  }
  buildInfo {
    useCommitTimestamp = true
    skipBuildBy = true
    skipBuildJdk = true
    skipBuildOs = true
  }
  licensing {
    licenses {
      license {
        id = 'MIT'
      }
    }
  }
  docs {
    javadoc {
      autoLinks.enabled = false
      options {
        docTitle = "Mastodon4J ${project.version} API"
        header = "Mastodon4J ${project.version} API"
        windowTitle = "Mastodon4J ${project.version} API"
      }
    }
  }
  publishing {
    signing {
      enabled = release
      secretKey = project.hasProperty('signingKey') ? signingKey : null
      password = project.hasProperty('signingPassword') ? signingPassword : null
    }
    releasesRepository  = localRelease? 'localRelease': 'sonatypeRelease'
    snapshotsRepository = localRelease? 'localSnapshot': 'sonatypeSnapshot'
  }
}

allprojects {
  normalization {
    runtimeClasspath {
      ignore('/META-INF/MANIFEST.MF')
    }
  }

  config {
    info {
      bytecodeVersion = 17
    }
  }

  repositories {
    mavenCentral()
  }
}

subprojects {
  dependencies {
    testImplementation 'org.assertj:assertj-core:3.26.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.3'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.12.0'

    testRuntimeOnly 'org.junit.platform:junit-platform-runner:1.10.3'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.3'
  }

  compileJava {
    doFirst {
      options.compilerArgs = [
              '-Xlint:all'
      ]
    }
  }

  java {
    sourceCompatibility = project.sourceCompatibility
  }

  spotless {
    java {
//      eclipse().configFile("${rootDir}/gradle/mastodon4j-style.xml")
//      importOrderFile("${rootDir}/gradle/mastodon4j.importorder")
    }
  }

  test {
    useJUnitPlatform()
  }
}